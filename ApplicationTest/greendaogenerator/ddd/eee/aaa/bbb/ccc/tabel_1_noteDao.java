package aaa.bbb.ccc;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import aaa.bbb.ccc.tabel_1_note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABEL_1_NOTE".
*/
public class tabel_1_noteDao extends AbstractDao<tabel_1_note, Long> {

    public static final String TABLENAME = "TABEL_1_NOTE";

    /**
     * Properties of entity tabel_1_note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Prop_1_text = new Property(1, String.class, "prop_1_text", false, "PROP_1_TEXT");
        public final static Property Prop_2_comment = new Property(2, String.class, "prop_2_comment", false, "PROP_2_COMMENT");
        public final static Property Prop_3_date = new Property(3, java.util.Date.class, "prop_3_date", false, "PROP_3_DATE");
    };


    public tabel_1_noteDao(DaoConfig config) {
        super(config);
    }
    
    public tabel_1_noteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABEL_1_NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROP_1_TEXT\" TEXT NOT NULL ," + // 1: prop_1_text
                "\"PROP_2_COMMENT\" TEXT," + // 2: prop_2_comment
                "\"PROP_3_DATE\" INTEGER);"); // 3: prop_3_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABEL_1_NOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, tabel_1_note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getProp_1_text());
 
        String prop_2_comment = entity.getProp_2_comment();
        if (prop_2_comment != null) {
            stmt.bindString(3, prop_2_comment);
        }
 
        java.util.Date prop_3_date = entity.getProp_3_date();
        if (prop_3_date != null) {
            stmt.bindLong(4, prop_3_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public tabel_1_note readEntity(Cursor cursor, int offset) {
        tabel_1_note entity = new tabel_1_note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // prop_1_text
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // prop_2_comment
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // prop_3_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, tabel_1_note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProp_1_text(cursor.getString(offset + 1));
        entity.setProp_2_comment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProp_3_date(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(tabel_1_note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(tabel_1_note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
